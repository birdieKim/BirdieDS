0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@3.10.10
3 info using node@v6.11.1
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec Result {
7 silly cache add   raw: './',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/Volumes/Data/Dropbox/Development/UI_elements',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/bird/.npm/data-structure-lite/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/bird/.npm correctMkdir not in flight; initializing
10 info lifecycle data-structure-lite@1.0.0~prepublish: data-structure-lite@1.0.0
11 silly lifecycle data-structure-lite@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/bird/.npm/data-structure-lite/1.0.0/package.tgz',
12 verbose tar pack   '/Volumes/Data/Dropbox/Development/UI_elements' ]
13 verbose tarball /Users/bird/.npm/data-structure-lite/1.0.0/package.tgz
14 verbose folder /Volumes/Data/Dropbox/Development/UI_elements
15 verbose addLocalTarball adding from inside cache /Users/bird/.npm/data-structure-lite/1.0.0/package.tgz
16 verbose correctMkdir /Users/bird/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd data-structure-lite@1.0.0
18 verbose afterAdd /Users/bird/.npm/data-structure-lite/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/bird/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/bird/.npm/data-structure-lite/1.0.0/package/package.json written
21 silly publish { name: 'data-structure-lite',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'Data structure library',
21 silly publish   main: 'data-structure-lite',
21 silly publish   scripts: { test: 'webpack && webpack-dev-server', prod: 'webpack' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/birdieKim/data-structure-lite.git' },
21 silly publish   author: { name: 'Birdie Yaejin Kim' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/birdieKim/data-structure-lite/issues' },
21 silly publish   homepage: 'https://github.com/birdieKim/data-structure-lite#readme',
21 silly publish   devDependencies:
21 silly publish    { 'css-loader': '^0.28.4',
21 silly publish      qunitjs: '^2.4.0',
21 silly publish      'style-loader': '^0.18.2',
21 silly publish      'uglifyjs-webpack-plugin': '^0.4.6',
21 silly publish      webpack: '^3.5.5',
21 silly publish      'webpack-dev-server': '^2.6.1' },
21 silly publish   directories: { test: 'test' },
21 silly publish   dependencies: {},
21 silly publish   readme: '# Data Structure Lite\nData Structure Lite is a JavaScript library for data structure focused on a few main functions.\nIt supports data structures as follows: queue, priority queue, stack, linked list, doubly linked list, tree, binary search tree, heap\n\n## Getting Started\n### Install\nInstall with npm:\n```\nnpm install data-structure-lite\n```\nImport into your file:\n```\n<script src="/path/to/data-structure-lite.min.js"></script>\n```\n### Require\nIf you need a whole library:\n```javascript\nvar DSLite = require(\'data-structure-lite\');\n```\nIf you need a certain module in this library:\n```javascript\n// An example of queue\nvar Queue = require(\'data-structure-lite/queue\');\n```\n\n## Supported Data Structure\n\n\n### Queue\nCreate a queue:\n```javascript\nvar queue = new Queue();\n```\nIf you have a data for the first element in the queue:\n```javascript\n// If you have 10 as the first element for the queue\nvar queue = new Queue(10);\n```\nExamples:\n```javascript\nvar queue = new Queue();\n\nqueue.enqueue(100);   // return: 1, queue: [100]\nqueue.enqueue(200);   // return: 2, queue: [100, 200]\nqueue.enqueue(300);   // return: 3, queue: [100, 200, 300]\n\nqueue.peek();         // return: 100\nqueue.dequeue();      // return: 100, queue: [200, 300]\nqueue.dequeue();      // return: 200, queue: [300]\nqueue.getRear();      // return: 100, queue: []\nqueue.clear();        // queue: []\nqueue.isEmpty();      // return: true\nqueue.dequeue();      // return: undefined\n```\n\n------------\n### Priority Queue\nCreate a priority queue:\n```javascript\nvar pqueue = new PriorityQueue();\n```\nExamples:\n```javascript\nvar pqueue = new PriorityQueue();\n\npqueue.enqueue(\'Bear\', 10);   // return: 10, queue: {10: [\'Bear\']}\npqueue.isEmpty();             // return: false\npqueue.enqueue(\'Bird\', 10);   // return: 10, queue: {10: [\'Bear\', \'Bird\']}\npqueue.maxPriority;           // return: 10\n\npqueue.enqueue(\'Dog\', 8);     // return: 10, queue: {10: [\'Bear\', \'Bird\'], 8: [\'Dog\']}\npqueue.maxPriority;           // return: 10\npqueue.size();                // return: 3\npqueue.dequeue(8);            // return: \'Dog\', queue: {10: [\'Bear\', \'Bird\']}\n\npqueue.size(10);              // return: 2\npqueue.size(8);               // return: undefined\n\npqueue.dequeue(8);            // return: undefined\npqueue.enqueue(\'Bugs\', -1);   // return: undefined (the priority passed in is not a natural number)\n```\n\n------------\n### Stack\nCreate a stack:\n```javascript\nvar stack = new Stack();\n```\nIf you have a data for the first element in the stack:\n```javascript\n// If you have 10 as the first element for the stack\nvar stack = new Stack(10);\n```\nExamples:\n```javascript\nvar stack = new Stack();\n\nstack.top();        // return: -1\n\nstack.push(10);     // return: 1, stack: [10]\nstack.push(20);     // return: 2, stack: [10, 20]\nstack.push(30);     // return: 3, stack: [10, 20, 30]\n\nstack.top();        // return: 2\nstack.pop();        // return: 30, stack: [10, 20]\nstack.pop();        // return: 20, stack: [10]\nstack.pop();        // return: 10, stack: []\nstack.pop();        // return: undefined\nstack.isEmpty();    // return: true\n\nstack.push(15);     // return: 1, stack: [15]\nstack.push(25);     // return: 2, stack: [15, 25]\nstack.push(35);     // return: 3, stack: [15, 25, 35]\nstack.push(45);     // return: 4, stack: [15, 25, 35, 45]\n\nstack.top();        // return: 3\n\nstack.clear();      // stack: []\n\nstack.top();        // return: -1\nstack.isEmpty();    // return: true\n```\n\n------------\n### Linked List\nCreate a linked list:\n```javascript\nvar linkedList = new LinkedList();\n```\nIf you have a data for the first data in the list:\n```javascript\n// If you have 10 as the first data for the list\nvar linkedList = new LinkedList(10);\n```\nExamples:\n```javascript\nvar linkedList = new LinkedList();\n\nlinkedList.head;                    // return: null\nlinkedList.insert(3, -2);           // return: undefined (index passed in is not a natural number)\nlinkedList.remove(-2);              // return: undefined (index passed in is not a natural number)\n\nlinkedList.add(5);                  // return: {data: 5, next: null}\nlinkedList.head;                    // return: {data: 5, next: null}\n\nlinkedList.add(7);                  // return: {data: 7, next: {data:5, next: null}}\nlinkedList.add(10);                 // return: {data: 10, next: {data:7, next: {data:5, next: null}}}\nlinkedList.add(15);                 // return: {data: 15, next: {data:10,\n                                    //          next: {data:7, next: {data:5, next: null}}}}\nlinkedList.head.data;               // return: 15\n\nlinkedList.insert(8, 3);            // return: {data: 8, next: {data:5, next: null}}\nlinkedList.searchNodeAt(3).data;    // return: 8\nlinkedList.length;                  // return: 5\n\nlinkedList.remove(2);               // return: {data: 7, next: {data: 8, next: {data:5, next: null}}}\nlinkedList.searchNodeAt(2).data;    // return: 8\nlinkedList.length;                  // return: 4\n\nlinkedList.remove(3);               // return: {data:5, next: null}\n\nlinkedList.clear();\nlinkedList.isEmpty();               // return: true\n```\n\n------------\n### Doubly Linked List\nCreate a doubly linked list:\n```javascript\nvar doublyLinkedList = new DoublyLinkedList();\n```\nIf you have a data for the first data in the list:\n```javascript\n// If you have 10 as the first data for the list\nvar doublyLinkedList = new DoublyLinkedList(10);\n```\nExamples:\n```javascript\nvar doublyLinkedList = new doublyLinkedList();\n\ndoublyLinkedList.head;                // return: null\ndoublyLinkedList.length;              // return: 0\n\ndoublyLinkedList.addLast(10);         // return: {data: 10, next: null, previous: null}\ndoublyLinkedList.head;                // return: {data: 10, next: null, previous: null}\ndoublyLinkedList.tail;                // return: {data: 10, next: null, previous: null}\n\ndoublyLinkedList.addLast(20);         // return: {data: 20, next: null, previous: {data: 10, next: null, previous: null}}\ndoublyLinkedList.head;                // return: {data: 10, next: {data: 20, next: null,\n                                      //                           previous: {data: 10, next: null, previous: null}},\n                                      //          previous: null}\ndoublyLinkedList.tail;                // return: {data: 20, next: null, previous: {data: 10, next: null, previous: null}}\n\ndoublyLinkedList.insert(40, 2);       // return: {data: 40, next: null,\n                                      //          previous: {data: 20, next: null, previous: {data: 10, next: null, previous: null}}\ndoublyLinkedList.tail.data;           // return: 40\ndoublyLinkedList.tail.previous.data;  // return: 20\n\ndoublyLinkedList.insert(30, 2);       // return: {data: 30,\n                                      //          next: {data: 40, next: null, previous: {data: 30, next: {data: 40, ...}},\n                                      //          previous: {data: 20, next: {data: 30, ...}, previous: {data: 10, ...}}}\ndoublyLinkedList.tail.data;           // return: 40\ndoublyLinkedList.tail.previous.data;  // return: 30\n\ndoublyLinkedList.addLast(50);         // return: {data: 50, next: null,\n                                      //          previous: {data: 40, next: {data: 50, ...}, previous: {data: 30, ...}}}\ndoublyLinkedList.addLast(60);         // return: {data: 60, next: null,\n                                      //          previous: {data: 50, next: {data: 60, ...}, previous: {data: 40, ...}}}\ndoublyLinkedList.searchNodeAt(0);     // return: {data: 10,\n                                      //          next: {data: 20, next: {data: 30, ...}, previous: {data: 10, ...}},\n                                      //          previous: null}\ndoublyLinkedList.searchNodeAt(2);     // return: {data: 30,\n                                      //          next: {data: 40, next: {data: 50, ...}, previous: {data: 30, ...}},\n                                      //          previous: {data: 20, ...}}\n\ndoublyLinkedList.remove(5);           // return: {data: 60, next: null, previous: {data: 50, ...}}\ndoublyLinkedList.insert(70, -2);      // return: undefined\n\ndoublyLinkedList.clear();\ndoublyLinkedList.isEmpty();           // return: true\n```\n\n------------\n### Tree\nCreate a tree:\n```javascript\nvar tree = new Tree();\n```\nIf you have a data for the root node, the maximum number of children and a function for checking the equality between nodes:\n```javascript\n// A Function for checking the equality between nodes\n// SHOULD have 2 parameters and return boolean value\nvar equalFunc = function(a, b)  {\n  if (a === b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n// If you have 10 as data of the first node, 2 as the max number of children that the parent node can have\n// and a function for checking the equality between nodes\n// If the equalFunc is undefined, the default function would be same as above.\nvar tree = new Tree(10, 2, equalFunc);\n```\nExamples:\n```javascript\nvar equalFunc = function(a, b)  {\n  if (a === b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar tree = new Tree(\'one\', 2, equalFunc);\n\ntree._root;                           // return: {data: \'one\', parent: null, children: []}\ntree.insert(\'two\', \'one\', \'BF\');      // tree: {data: \'one\', parent: null,\n                                      //        children: [{data: \'two\', parent: {data: \'one\', ...}, children: []}]}\n\ntree._root.children[0].parent.data;   // return: \'one\'\n\ntree.insert(\'three\', \'one\', \'BF\');    // tree: {data: \'one\', parent: null,\n                                      //        children: [{data: \'two\', ...}, {data: \'three, ...\'}]}\n\n\ntree.insert(\'four\', \'one\', \'BF\');     //=> Error! This tree has the max number of children(2)\n                                      //   so the parent node cannot have more than 2 children nodes\n\ntree.insert(\'four\', \'two\', \'BF\');     // tree: {data: \'one\', parent: null,\n                                      //        children: [{data: \'two\', parent: {data: \'one\', ...}, children: [{data: \'four\', ...}]},\n                                      //                   {data: \'three\', ...}]}\n\ntree.traverse(\'BF\');                  // return: [\'one\', \'two\', \'three\', \'four\']\ntree.traverse(\'DF\');                  // return: [\'one\', \'two\', \'four\', \'three\']\n\ntree.insert(\'five\', \'three\', \'BF\');   // tree: {data: \'one\', parent: null,\n                                      //        children: [{data: \'two\', children: [{data: \'four\', ...}], ...},\n                                      //                   {data: \'three\', children: [{data: \'five\', ...}], ...}]}\ntree.traverse(\'BF\', undefined, function(node) {\n  node.data += \'!\';\n});                                   // return: [\'one!\', \'two!\', \'three!\', \'four!\']\n\ntree.delete(\'three!\', \'one!\', \'BF\');  // tree: {data: \'one!\', parent: null,\n                                      //        children: [{data: \'two!\', children: [{data: \'four!\', ...}], ...}]}\ntree.traverse(\'BF\');                  // return: [\'one!\', \'two!\', \'four!\']\n\ntree.addToRoot(\'zero\');               // tree: {data: \'zero\', parent: null,\n                                      //        children: [{data: \'one!\', parent: {data: \'zero\', ...},\n                                      //                    children: [{data: \'two!\', ...}]}]}\ntree._root.data;                      // return: \'zero\'\ntree.traverse(\'DF\');                  // return: [\'zero\', \'one!\', \'two!\', four!\']\n\ntree.clear();\ntree.isEmpty();                       // return: true   \n```\n\n\n------------\n### Binary Search Tree\nCreate a binary search tree:\n```javascript\nvar tree = new BinarySearchTree();\n```\nIf you have a data for the root node, the maximum number of children and a function for comparison between nodes:\n```javascript\n// A Function for comparison between nodes\n// SHOULD have 2 parameters and return these:\n//      a < b   : return negative value\n//      a === b : return 0\n//      a > b   : return positive value\nvar comapreFunc = function(a, b)  {\n  return a - b;\n};\n// If you have 10 as data of the first node\n// and a function for checking the equality between nodes\n// If the compareFunc is undefined, the default function would be same as above.\nvar tree = new BinarySearchTree(10, compareFunc);\n```\nExamples:\n```javascript\nvar comapreFunc = function(a, b)  {\n  return a - b;\n};\n\nvar tree = new BinarySearchTree(10, compareFunc);\n\ntree._root;                           // return: {data: 10, left: null, right: null}\n\ntree.insert(5);\ntree.insert(20);\ntree.insert(15);\ntree.insert(7);\ntree.insert(25);\n\ntree.traverse(\'In-order\');            // return: [5, 7, 10, 15, 20, 25]\n\ntree.insert(3);                      \n\ntree.delete(10);\ntree.search(50);                      // return: undefined (50 is not in the binary search tree)\n\ntree.traverse(\'Pre-order\');           // return: [15, 5, 3, 7, 20, 25]\ntree.delete(0);                       // return: undefined (0 is not in the binary search tree)\n\ntree.search(15);                      // return: {data: 15, left: {data: 5, ...}, right: {data: 20, ...}}\n\ntree.traverse(\'Post-order\');          // return: [3, 7, 5, 25, 20, 15]\n\ntree.findMinNode();                   // return: {data: 3, left: null, right: null\ntree.findMaxNode();                   // return: {data: 15, left: null, right: null\n\ntree.clear();\ntree.isEmpty();                       // return: true\ntree._root;                           // return: undefined\ntree.traverse(\'Pre-order\');           // return: undefined\ntree.delete(0);                       // return: undefined (0 is not in the binary search tree)\ntree.search(10);                      // return: undefined (The binary search tree is empty)\n```\n\n\n\n\n------------\n### Heap\nCreate a heap:\n```javascript\nvar heap = new Heap();\n```\nIf you have a data for the root node or an array data for the heap, the maximum number of children and a function for comparison between nodes and the type for the heap (\'MinHeap\'/\'MaxHeap\' - \'MinHeap\' is a default):\n```javascript\n// A Function for comparison between nodes\n// SHOULD have 2 parameters and return these:\n//      a < b   : return negative value\n//      a === b : return 0\n//      a > b   : return positive value\nvar comapreFunc = function(a, b)  {\n  return a - b;\n};\n// If you have 10 as data of the first node\n// and a function for checking the equality between nodes\n// If the compareFunc is undefined, the default function would be same as above.\n// If you want to have a min heap:\nvar heap = new Heap(10, compareFunc, \'MinHeap\');\n\n// If you have an array [1 ,2 , 3, 4, 5]\n// and a function for checking the equality between nodes\n// If the compareFunc is undefined, the default function would be same as above.\n// If you want to have a max heap:\nvar anotherHeap = new Heap([1, 2, 3, 4, 5], compareFunc, \'MaxHeap\');\n```\nExamples:\n```javascript\nvar comapreFunc = function(a, b)  {\n  return a - b;\n};\n\nvar heap = new Heap(10, compareFunc, \'MaxHeap\');\n\nheap.getRoot();                       // return: 10\nheap._type;                           // \'MaxHeap\'\nheap.insert(30);\nheap._heapArray;                      // return: [30, 10]\n\n\nheap = new Heap([50, 40, 30, 20, 10]);\n\nheap.getRoot();                       // return: 10\nheap._type;                           // return: \'MinHeap\'\nheap.deleteRoot();                    // return: 10\nheap._heapArray;                      // return: [20, 30, 40, 50]\n\n\nheap = new Heap([100, 80, 70, 120, 50], undefined, \'MaxHeap\');\n\nheap._heapArray;                      // return: [120, 100, 70, 80, 50]\nheap.deleteRoot();                    // return: 120\nheap.getRoot();                       // return: 100\nheap.isEmpty();                       // return: false\nheap.clear();\nheap.getRoot();                       // return: undefined (The heap is empty)\nheap.isEmpty();                       // return: true\n```\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'cdb7ea3c2507cfd3c852855af50097eaf5861108',
21 silly publish   _id: 'data-structure-lite@1.0.0',
21 silly publish   _shasum: 'b044fa68a48d4658a24733478ccb07073fb93fb2',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name data-structure-lite
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'data-structure-lite',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'data-structure-lite',
26 silly mapToRegistry   name: 'data-structure-lite',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/data-structure-lite
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/bird/.npm/data-structure-lite/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/data-structure-lite
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 19:58:13
33 verbose request using bearer token for auth
34 verbose request id b8ee163f529cea67
35 http request PUT https://registry.npmjs.org/data-structure-lite
36 http 403 https://registry.npmjs.org/data-structure-lite
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '91',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Wed, 20 Sep 2017 09:58:15 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-mel6526-MEL',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1505901494.861731,VS0,VE1323',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating /Users/bird/.npm/registry.npmjs.org/data-structure-lite on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published version 1.0.0. : data-structure-lite
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid data-structure-lite
43 verbose cwd /Volumes/Data/Dropbox/Development/UI_elements
44 error Darwin 15.6.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "./"
46 error node v6.11.1
47 error npm  v3.10.10
48 error code E403
49 error You cannot publish over the previously published version 1.0.0. : data-structure-lite
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
